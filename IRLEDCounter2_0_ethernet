#include <SPI.h>
#include <Ethernet.h>
#include "stopWatch.h"
#include "update.h"

stopWatch sW;
update update;


// Enter a MAC address and IP address for your controller below.
// The IP address will be dependent on your local network.
// gateway and subnet are optional:
byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };
IPAddress ip(192,168,1, 177);
IPAddress gateway(192,168,1, 1);
IPAddress subnet(255, 255, 0, 0);


// telnet defaults to port 23
EthernetServer server(23);
boolean alreadyConnected = false; // whether or not the client was connected previously

int EdgePop = 0;
int Status;
int PopIn = 0;
int PopOut = 0;
int PopOutErr = 0;
int time = 0;
int ID = 0;


void setup(){
  Serial.begin(9600);
  pinMode(13, OUTPUT);
  Serial.println("And then... it begins");
  update.init();
  // initialize the ethernet device
  Ethernet.begin(mac, ip, gateway, subnet);
  // start listening for clients
  server.begin();
  // Open serial communications and wait for port to open:
  Serial.begin(9600);
  while (!Serial) {
    ; // wait for serial port to connect. Needed for Leonardo only
  }

  Serial.print("Chat server address:");
  Serial.println(Ethernet.localIP());
}
void loop(){

  //Output data
  if(millis() - time >= 300000){
    // wait for a new client:
    EthernetClient client = server.available();

    // when the client sends the first byte, say hello:
    if (client) {
      // clead out the input buffer:
      client.flush();    
      Serial.println("Passing data to client");
      client.println(ID); 
      client.println(PopIn); 
      client.println(PopOut); 
      client.println(PopOutErr); 
      client.println(EdgePop); 
    }
    PopIn = 0;
    PopOut = 0;
    PopOutErr = 0;
    time = millis();
  }
  sW.start();
  if(sW.elapsed() > 100){
    update.ambiVals();
    sW.reset();
  }

  /*if LSD is triggered
   wait until other LSD has been triggered
   if first LSD untriggered: do nothing
   wait until first LSD has been untriggered
   increment population in building
   
   if second LSD untriggered then fall back a step
   
   It will return 1 when nothing is in the way
   
   Walking in pattern          Walking out pattern
   Inner | Outter              Inner | Outter
   0->   1   |   1             0->   1   |   1
   1->   1   |   0             1->   0   |   1
   2->   0   |   0             2->   0   |   0
   3->   0   |   1             3->   1   |   0
   4->   1   |   1             4->   1   |   1
   
   */

  if(update.checkIn() && !update.checkOut() && (Status == 0)){
    while(((update.checkIn() && !update.checkOut()) || (!update.checkIn() && !update.checkOut())) && (Status == 0)){
      digitalWrite(13, HIGH);
      Serial.println("1i");
      while(((!update.checkIn() && !update.checkOut()) || (!update.checkIn() && update.checkOut())) && (Status == 0)){
        Serial.println("2i");
        while(((!update.checkIn() && update.checkOut()) || (update.checkIn() && update.checkOut())) && (Status == 0)){
          Serial.println("3i");
          if((update.checkIn() && update.checkOut()) || (Status == 0)){
            Status = 1;
            EdgePop ++;
            PopIn ++;
          }
        }
      }          
    }
  }

  else if(!update.checkIn() && update.checkOut() && (Status == 0)){
    while(((!update.checkIn() && update.checkOut()) || (!update.checkIn() && !update.checkOut())) && (Status == 0)){
      digitalWrite(13, HIGH);
      Serial.println("1o");
      while(((!update.checkIn() && !update.checkOut()) || (update.checkIn() && !update.checkOut())) && (Status == 0)){
        Serial.println("2o");
        while(((update.checkIn() && !update.checkOut()) || (update.checkIn() && update.checkOut())) && (Status == 0)){
          Serial.println("3o");
          if((update.checkIn() && update.checkOut()) || (Status == 0)){
            Status = 1;
            if(EdgePop < 1){
              PopOutErr ++;
            }
            else{
              EdgePop --;
              PopOut ++;
            }
          }
        }
      }          
    }
  }
  if(Status == 1){    
    Serial.println("Edge population; ");
    Serial.println(EdgePop);
  }

  digitalWrite(13, LOW);
  Status = 0;
  delay(50);
